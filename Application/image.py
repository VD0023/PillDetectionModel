# -*- coding: utf-8 -*-

# Form implementation generated from reading ui file 'image.ui'
#
# Created by: PyQt5 UI code generator 5.15.7
#
# WARNING: Any manual changes made to this file will be lost when pyuic5 is
# run again.  Do not edit this file unless you know what you are doing.

from PyQt5 import QtCore, QtGui, QtWidgets
from PyQt5.QtWidgets import QFileDialog
import subprocess
import os
import tkinter as tk
from tkinter import filedialog


class ImageMainWindow(QtWidgets.QMainWindow):
    def __init__(self):
        super(ImageMainWindow, self).__init__()
        self.setupUi(self)

    def setupUi(self, MainWindow):
        MainWindow.setObjectName("ImageMainWindow")
        MainWindow.resize(557, 600)
        self.centralwidget = QtWidgets.QWidget(MainWindow)
        self.centralwidget.setObjectName("centralwidget")
        self.widget = QtWidgets.QWidget(self.centralwidget)
        self.widget.setGeometry(QtCore.QRect(0, 0, 550, 500))
        self.widget.setObjectName("widget")
        self.label = QtWidgets.QLabel(self.widget)
        self.label.setGeometry(QtCore.QRect(40, 30, 480, 430))
        self.label.setStyleSheet("background-color: qlineargradient(spread:pad, x1:0, y1:0, x2:1, y2:0, stop:0 rgba(0, 0, 0, 255), stop:1 rgba(0, 0, 100, 255));\n"
                                 "border-top-left-radius:50px;\n"
                                 "border-bottom-right-radius:50px;")
        self.label.setText("")
        self.label.setObjectName("label")
        self.label_2 = QtWidgets.QLabel(self.widget)
        self.label_2.setGeometry(QtCore.QRect(70, 80, 411, 321))
        self.label_2.setText("")
        self.label_2.setObjectName("label_2")
        self.layoutWidget = QtWidgets.QWidget(self.widget)
        self.layoutWidget.setGeometry(QtCore.QRect(170, 420, 221, 25))
        self.layoutWidget.setObjectName("layoutWidget")
        self.horizontalLayout = QtWidgets.QHBoxLayout(self.layoutWidget)
        self.horizontalLayout.setContentsMargins(0, 0, 0, 0)
        self.horizontalLayout.setObjectName("horizontalLayout")
        self.pushButton_2 = QtWidgets.QPushButton(self.layoutWidget)
        self.pushButton_2.setObjectName("pushButton_2")
        self.horizontalLayout.addWidget(self.pushButton_2)
        self.pushButton = QtWidgets.QPushButton(self.layoutWidget)
        self.pushButton.setObjectName("pushButton")
        self.horizontalLayout.addWidget(self.pushButton)
        self.Header = QtWidgets.QWidget(self.widget)
        self.Header.setGeometry(QtCore.QRect(70, 30, 451, 51))
        self.Header.setStyleSheet("background-color: qlineargradient(spread:pad, x1:0, y1:0, x2:1, y2:0, stop:0 rgba(0, 0, 0, 255), stop:0.55 rgba(0, 0, 72, 255), stop:0.98 rgba(0, 0, 100, 255), stop:1 rgba(0, 0, 0, 0));\n"
                                  "border-top-left-radius:20px;\n"
                                  "border-top-right-radius:20px;\n"
                                  "border-bottom-left-radius:20px;\n"
                                  "border-bottom-right-radius:20px;")
        self.Header.setObjectName("Header")
        self.textEdit = QtWidgets.QTextEdit(self.Header)
        self.textEdit.setGeometry(QtCore.QRect(20, 0, 431, 51))
        self.textEdit.setStyleSheet("font: 8pt \"Times New Roman\";\n"
                                    "color: rgb(255, 255, 255);\n"
                                    "text-border:rgb(0, 0, 0);")
        self.textEdit.setObjectName("textEdit")
        MainWindow.setCentralWidget(self.centralwidget)
        self.menubar = QtWidgets.QMenuBar(MainWindow)
        self.menubar.setGeometry(QtCore.QRect(0, 0, 557, 21))
        self.menubar.setObjectName("menubar")
        MainWindow.setMenuBar(self.menubar)
        self.statusbar = QtWidgets.QStatusBar(MainWindow)
        self.statusbar.setObjectName("statusbar")
        MainWindow.setStatusBar(self.statusbar)

        self.retranslateUi(MainWindow)
        self.pushButton_2.clicked.connect(self.select_image)
        self.pushButton.clicked.connect(self.exit_image_window)
        QtCore.QMetaObject.connectSlotsByName(MainWindow)

    def retranslateUi(self, MainWindow):
        _translate = QtCore.QCoreApplication.translate
        MainWindow.setWindowTitle(_translate("MainWindow", "MainWindow"))
        self.pushButton_2.setText(_translate("MainWindow", "Open Image"))
        self.pushButton.setText(_translate("MainWindow", "Exit"))
        self.textEdit.setHtml(_translate("MainWindow", "<!DOCTYPE HTML PUBLIC \"-//W3C//DTD HTML 4.0//EN\" \"http://www.w3.org/TR/REC-html40/strict.dtd\">\n"
                                                       "<html><head><meta name=\"qrichtext\" content=\"1\" /><style type=\"text/css\">\n"
                                                       "p, li { white-space: pre-wrap; }\n"
                                                       "</style></head><body style=\" font-family:\'Times New Roman\'; font-size:8pt; font-weight:400; font-style:normal;\">\n"
                                                       "<p style=\" margin-top:0px; margin-bottom:0px; margin-left:0px; margin-right:0px; -qt-block-indent:0; text-indent:0px;\"><span style=\" font-family:\'MS Shell Dlg 2\'; font-size:16pt; font-weight:600;\">     Techista Unmasking the Invisible</span></p></body></html>"))

    def select_image(self):
        options = QFileDialog.Options()
        options |= QFileDialog.ReadOnly
        fileName, _ = QFileDialog.getOpenFileName(self, "Open Image", "", "Image Files (*.png *.jpg *.jpeg *.bmp *.gif)", options=options)
        if fileName:
            pixmap = QtGui.QPixmap(fileName)
            self.label_2.setPixmap(pixmap.scaled(self.label_2.size(), QtCore.Qt.AspectRatioMode.KeepAspectRatio))

    def exit_image_window(self):
        self.close()

    def open_detection_window():
        # Open a file dialog to select the image file
        file_path = filedialog.askopenfilename(title="Select Image")

        # Get the absolute paths to the model and labelmap files
        model_path = os.path.abspath("/models/research/object_detection/inference_graph_try5/saved_model/saved_model.pb")
        labelmap_path = os.path.abspath("/models/research/object_detection/label_map.pbtxt")

        # Get the absolute path to the detect_from_image.py script
        script_path = os.path.abspath("/models/research/object_detection/detect_from_image.py")

        # Run the detection script with the selected image file
        subprocess.run(["python", script_path, "-m", model_path, "-l", labelmap_path, "-i", file_path])


if __name__ == "__main__":
    app = QtWidgets.QApplication([])
    image_window = ImageMainWindow()
    image_window.show()
    app.exec_()

    window = tk.Tk()


    def open_detection_window():
        # Open a file dialog to select the image file
        file_path = filedialog.askopenfilename(title="Select Image")

        # Run the detection script with the selected image file
        subprocess.run(
            ["python", "models/research/object_detection/detect_from_image.py", "-m", "models/research/object_detection/inference_graph_try5/saved_model/", "-l", "models/research/object_detection/label_map.pbtxt", "-i", file_path])

    # Add a push button
    button = tk.Button(window, text="Run Detection", command=open_detection_window)
    button.pack()

    # Start the Tkinter event loop
    window.mainloop()